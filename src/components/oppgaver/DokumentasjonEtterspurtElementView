import {Fil, OppgaveElement} from "../../redux/innsynsdata/innsynsdataReducer";
import React, {useEffect, useState} from "react";
import {FilFeil, validerFilArrayForFeil} from "../../utils/vedleggUtils";
import {useSelector} from "react-redux";
import {InnsynAppState} from "../../redux/reduxTypes";
import FilView from "./FilView";
import {skrivFeilmelding, alertUser, VelgFil} from "./OppgaveView";

const DokumentasjonEtterspurtElementView = (props: {
    typeTekst: string;
    tilleggsinfoTekst: string | undefined;
    oppgaveElement: OppgaveElement;
    oppgaveElementIndex: number;
    oppgaveIndex: number;
    oppgaveId: string;
    setOverMaksStorrelse: (overMaksStorrelse: boolean) => void;
}) => {
    const [listeMedFilerSomFeiler, setListeMedFilerSomFeiler] = useState<Array<FilFeil>>([]);

    const oppgaveVedlegsOpplastingFeilet: boolean = useSelector(
        (state: InnsynAppState) => state.innsynsdata.oppgaveVedlegsOpplastingFeilet
    );

    useEffect(() => {
        if (props.oppgaveElement.filer && props.oppgaveElement.filer.length > 0) {
            window.addEventListener("beforeunload", alertUser);
        }
        return function unload() {
            window.removeEventListener("beforeunload", alertUser);
        };
    }, [props.oppgaveElement.filer]);

    const visOppgaverDetaljeFeil: boolean = oppgaveVedlegsOpplastingFeilet || listeMedFilerSomFeiler.length > 0;
    return (
        <div className={"oppgaver_detalj" + (visOppgaverDetaljeFeil ? " oppgaver_detalj_feil" : "")}>
            <VelgFil
                typeTekst={props.typeTekst}
                tilleggsinfoTekst={props.tilleggsinfoTekst}
                oppgaveElement={props.oppgaveElement}
                oppgaveElementIndex={props.oppgaveElementIndex}
                oppgaveIndex={props.oppgaveIndex}
                setListeMedFilerSomFeiler={setListeMedFilerSomFeiler}
                oppgaveId={props.oppgaveId}
                setOverMaksStorrelse={props.setOverMaksStorrelse}
            />

            {props.oppgaveElement.filer &&
            props.oppgaveElement.filer.length > 0 &&
            props.oppgaveElement.filer.map((fil: Fil, vedleggIndex: number) => (
                <FilView
                    key={vedleggIndex}
                    fil={fil}
                    oppgaveElement={props.oppgaveElement}
                    vedleggIndex={vedleggIndex}
                    oppgaveElementIndex={props.oppgaveElementIndex}
                    oppgaveIndex={props.oppgaveIndex}
                    setOverMaksStorrelse={props.setOverMaksStorrelse}
                    oppgaveId={props.oppgaveId}
                />
            ))}
            {validerFilArrayForFeil(listeMedFilerSomFeiler) &&
            skrivFeilmelding(listeMedFilerSomFeiler, props.oppgaveElementIndex)}
        </div>
    );
};

export default DokumentasjonEtterspurtElementView;