/**
 * Generated by orval v6.11.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery} from "@tanstack/react-query";
import type {UseQueryOptions, QueryFunction, UseQueryResult, QueryKey} from "@tanstack/react-query";
import {axiosInstance} from "../../axios-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never;

export const harSoknaderMedInnsyn = (options?: SecondParameter<typeof axiosInstance>, signal?: AbortSignal) => {
    return axiosInstance<boolean>({url: `/api/v1/innsyn/harSoknaderMedInnsyn`, method: "get", signal}, options);
};

export const getHarSoknaderMedInnsynQueryKey = () => [`/api/v1/innsyn/harSoknaderMedInnsyn`];

export type HarSoknaderMedInnsynQueryResult = NonNullable<Awaited<ReturnType<typeof harSoknaderMedInnsyn>>>;
export type HarSoknaderMedInnsynQueryError = unknown;

export const useHarSoknaderMedInnsyn = <
    TData = Awaited<ReturnType<typeof harSoknaderMedInnsyn>>,
    TError = unknown
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof harSoknaderMedInnsyn>>, TError, TData>;
    request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHarSoknaderMedInnsynQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof harSoknaderMedInnsyn>>> = ({signal}) =>
        harSoknaderMedInnsyn(requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof harSoknaderMedInnsyn>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};
