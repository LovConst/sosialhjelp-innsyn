/**
 * Generated by orval v6.11.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery, useMutation} from "@tanstack/react-query";
import type {
    UseQueryOptions,
    UseMutationOptions,
    QueryFunction,
    MutationFunction,
    UseQueryResult,
    QueryKey,
} from "@tanstack/react-query";
import type {VedleggResponse, OppgaveOpplastingResponse, SendVedleggBody} from ".././model";
import {axiosInstance} from "../../axios-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never;

export const hentVedlegg = (
    fiksDigisosId: string,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<VedleggResponse[]>(
        {url: `/api/v1/innsyn/${fiksDigisosId}/vedlegg`, method: "get", signal},
        options
    );
};

export const getHentVedleggQueryKey = (fiksDigisosId: string) => [`/api/v1/innsyn/${fiksDigisosId}/vedlegg`];

export type HentVedleggQueryResult = NonNullable<Awaited<ReturnType<typeof hentVedlegg>>>;
export type HentVedleggQueryError = unknown;

export const useHentVedlegg = <TData = Awaited<ReturnType<typeof hentVedlegg>>, TError = unknown>(
    fiksDigisosId: string,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof hentVedlegg>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentVedleggQueryKey(fiksDigisosId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentVedlegg>>> = ({signal}) =>
        hentVedlegg(fiksDigisosId, requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof hentVedlegg>>, TError, TData>(queryKey, queryFn, {
        enabled: !!fiksDigisosId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const sendVedlegg = (
    fiksDigisosId: string,
    sendVedleggBody: SendVedleggBody,
    options?: SecondParameter<typeof axiosInstance>
) => {
    const formData = new FormData();
    sendVedleggBody.files.forEach((value) => formData.append("files", value));

    return axiosInstance<OppgaveOpplastingResponse[]>(
        {
            url: `/api/v1/innsyn/${fiksDigisosId}/vedlegg`,
            method: "post",
            headers: {"Content-Type": "multipart/form-data"},
            data: formData,
        },
        options
    );
};

export type SendVedleggMutationResult = NonNullable<Awaited<ReturnType<typeof sendVedlegg>>>;
export type SendVedleggMutationBody = SendVedleggBody;
export type SendVedleggMutationError = unknown;

export const useSendVedlegg = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof sendVedlegg>>,
        TError,
        {fiksDigisosId: string; data: SendVedleggBody},
        TContext
    >;
    request?: SecondParameter<typeof axiosInstance>;
}) => {
    const {mutation: mutationOptions, request: requestOptions} = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof sendVedlegg>>,
        {fiksDigisosId: string; data: SendVedleggBody}
    > = (props) => {
        const {fiksDigisosId, data} = props ?? {};

        return sendVedlegg(fiksDigisosId, data, requestOptions);
    };

    return useMutation<
        Awaited<ReturnType<typeof sendVedlegg>>,
        TError,
        {fiksDigisosId: string; data: SendVedleggBody},
        TContext
    >(mutationFn, mutationOptions);
};
