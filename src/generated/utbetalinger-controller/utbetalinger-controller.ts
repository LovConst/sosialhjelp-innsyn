/**
 * Generated by orval v6.11.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {useQuery} from "@tanstack/react-query";
import type {UseQueryOptions, QueryFunction, UseQueryResult, QueryKey} from "@tanstack/react-query";
import type {
    UtbetalingerResponse,
    UtbetalteUtbetalingerResponse,
    HentUtbetalingerParams,
    GetUtbetalingExistsParams,
    KommendeUtbetalingerResponse,
} from ".././model";
import {axiosInstance} from "../../axios-instance";
import type {ErrorType} from "../../axios-instance";

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never;

export const hentUtbetalingerForSak = (
    fiksDigisosId: string,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<UtbetalingerResponse[]>(
        {url: `/api/v1/innsyn/${fiksDigisosId}/utbetalinger`, method: "get", signal},
        options
    );
};

export const getHentUtbetalingerForSakQueryKey = (fiksDigisosId: string) => [
    `/api/v1/innsyn/${fiksDigisosId}/utbetalinger`,
];

export type HentUtbetalingerForSakQueryResult = NonNullable<Awaited<ReturnType<typeof hentUtbetalingerForSak>>>;
export type HentUtbetalingerForSakQueryError = ErrorType<unknown>;

export const useHentUtbetalingerForSak = <
    TData = Awaited<ReturnType<typeof hentUtbetalingerForSak>>,
    TError = ErrorType<unknown>
>(
    fiksDigisosId: string,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof hentUtbetalingerForSak>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentUtbetalingerForSakQueryKey(fiksDigisosId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentUtbetalingerForSak>>> = ({signal}) =>
        hentUtbetalingerForSak(fiksDigisosId, requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof hentUtbetalingerForSak>>, TError, TData>(queryKey, queryFn, {
        enabled: !!fiksDigisosId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const hentUtbetalteUtbetalinger = (options?: SecondParameter<typeof axiosInstance>, signal?: AbortSignal) => {
    return axiosInstance<UtbetalteUtbetalingerResponse[]>(
        {url: `/api/v1/innsyn/utbetalte`, method: "get", signal},
        options
    );
};

export const getHentUtbetalteUtbetalingerQueryKey = () => [`/api/v1/innsyn/utbetalte`];

export type HentUtbetalteUtbetalingerQueryResult = NonNullable<Awaited<ReturnType<typeof hentUtbetalteUtbetalinger>>>;
export type HentUtbetalteUtbetalingerQueryError = ErrorType<unknown>;

export const useHentUtbetalteUtbetalinger = <
    TData = Awaited<ReturnType<typeof hentUtbetalteUtbetalinger>>,
    TError = ErrorType<unknown>
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof hentUtbetalteUtbetalinger>>, TError, TData>;
    request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentUtbetalteUtbetalingerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentUtbetalteUtbetalinger>>> = ({signal}) =>
        hentUtbetalteUtbetalinger(requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof hentUtbetalteUtbetalinger>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const hentUtbetalinger = (
    params?: HentUtbetalingerParams,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<UtbetalingerResponse[]>(
        {url: `/api/v1/innsyn/utbetalinger`, method: "get", params, signal},
        options
    );
};

export const getHentUtbetalingerQueryKey = (params?: HentUtbetalingerParams) => [
    `/api/v1/innsyn/utbetalinger`,
    ...(params ? [params] : []),
];

export type HentUtbetalingerQueryResult = NonNullable<Awaited<ReturnType<typeof hentUtbetalinger>>>;
export type HentUtbetalingerQueryError = ErrorType<unknown>;

export const useHentUtbetalinger = <TData = Awaited<ReturnType<typeof hentUtbetalinger>>, TError = ErrorType<unknown>>(
    params?: HentUtbetalingerParams,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof hentUtbetalinger>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentUtbetalingerQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentUtbetalinger>>> = ({signal}) =>
        hentUtbetalinger(params, requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof hentUtbetalinger>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const getUtbetalingExists = (
    params?: GetUtbetalingExistsParams,
    options?: SecondParameter<typeof axiosInstance>,
    signal?: AbortSignal
) => {
    return axiosInstance<boolean>({url: `/api/v1/innsyn/utbetalinger/exists`, method: "get", params, signal}, options);
};

export const getGetUtbetalingExistsQueryKey = (params?: GetUtbetalingExistsParams) => [
    `/api/v1/innsyn/utbetalinger/exists`,
    ...(params ? [params] : []),
];

export type GetUtbetalingExistsQueryResult = NonNullable<Awaited<ReturnType<typeof getUtbetalingExists>>>;
export type GetUtbetalingExistsQueryError = ErrorType<unknown>;

export const useGetUtbetalingExists = <
    TData = Awaited<ReturnType<typeof getUtbetalingExists>>,
    TError = ErrorType<unknown>
>(
    params?: GetUtbetalingExistsParams,
    options?: {
        query?: UseQueryOptions<Awaited<ReturnType<typeof getUtbetalingExists>>, TError, TData>;
        request?: SecondParameter<typeof axiosInstance>;
    }
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetUtbetalingExistsQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUtbetalingExists>>> = ({signal}) =>
        getUtbetalingExists(params, requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof getUtbetalingExists>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};

export const hentKommendeUtbetalinger = (options?: SecondParameter<typeof axiosInstance>, signal?: AbortSignal) => {
    return axiosInstance<KommendeUtbetalingerResponse[]>(
        {url: `/api/v1/innsyn/kommende`, method: "get", signal},
        options
    );
};

export const getHentKommendeUtbetalingerQueryKey = () => [`/api/v1/innsyn/kommende`];

export type HentKommendeUtbetalingerQueryResult = NonNullable<Awaited<ReturnType<typeof hentKommendeUtbetalinger>>>;
export type HentKommendeUtbetalingerQueryError = ErrorType<unknown>;

export const useHentKommendeUtbetalinger = <
    TData = Awaited<ReturnType<typeof hentKommendeUtbetalinger>>,
    TError = ErrorType<unknown>
>(options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof hentKommendeUtbetalinger>>, TError, TData>;
    request?: SecondParameter<typeof axiosInstance>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
    const {query: queryOptions, request: requestOptions} = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getHentKommendeUtbetalingerQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof hentKommendeUtbetalinger>>> = ({signal}) =>
        hentKommendeUtbetalinger(requestOptions, signal);

    const query = useQuery<Awaited<ReturnType<typeof hentKommendeUtbetalinger>>, TError, TData>(
        queryKey,
        queryFn,
        queryOptions
    ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

    query.queryKey = queryKey;

    return query;
};
